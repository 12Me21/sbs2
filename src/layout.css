@charset "utf-8";

/****************
 ** Everything **
 ****************/

:root {
	word-break: break-word; /* required for text wrapping to work */
	-webkit-text-size-adjust: none; /* this fixes an ios safari bug where some text is "stuck" at larger sizes after rotating the screen */
}

* {
	margin: 0;
	box-sizing: border-box;
	/* override default browser styles */
	/* (these are all inherited properties) */
	word-break: inherit;
	font-family: inherit;
	font-variant-ligatures: none;
	contain: paint; /* optional */
}

/* always display images at correct aspect ratio, even if the element is the wrong size */
img {
	object-fit: contain;
}

/* by default, hidden just sets `display: none`, which is overridden by any element which has its display explicitly set (most of them) */
[hidden] {
	display: none !important;
}

/*****************
 ** Positioning **
 *****************/

/* HTML lacks a viewport element, and the root element is useless */
/* because of the root→viewport propagation of certain properties. */
/* So, we make <body> fill the screen, and use that as our viewport. */
html, body {
	position: fixed;
	overflow: clip; overflow: hidden;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
}

/**********
 ** Flex **
 **********/
.ROW, .COL { display: flex; }
.COL { flex-flow: column; }

.ROW > * { flex: none; min-width: 0; }
.COL > * { flex: none; min-height: 0; }
.FILL { flex: 0mm; }

/*********/
/* all elements with user content, must be tied up */
.pre {
	white-space: pre-wrap;
	unicode-bidi: embed;
}

/* this is really hard to get working */
.ellipsis {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: pre !important;
}
.ellipsis * {
	white-space: pre !important;
}

/*********
 ** Bar **
 *********/
/* the bar system is really gross and should probably be turned into flex now (or grid?)*/

/* These 3 classes handle like 90% of the layout lol */
.bar { /* contains textitems and items */
	display: block;
	overflow: hidden;
	box-sizing: content-box;
	min-height: var(--bar-height);
	line-height: var(--bar-height);
}
.bar, .bar * {
	/* if this isn't `top`, the .bar system's inline elements will overflow, because of their line-height */
	/* the real solution here is to use flex instead. but ehh */
	vertical-align: top !important;
}
.textItem { /* basically anything within a .bar */
	display: inline;
	min-height: var(--bar-height);
	line-height: var(--bar-height);
}
.item { /* for images and other blocks that can't wrap */
	display: inline-block;
	height: var(--bar-height);
	line-height: var(--bar-height);
}
.item, .textItem {
	/*max-width: -webkit-fill-available;
	max-width: -moz-available;
	max-width: stretch;*/
}
.bar .avatar {
	width: var(--bar-height);
}
.bar .iconBg {
	width: 1em;
	/*margin-right: 0.2rem;*/
}
.rem2-3 .iconBg {
	width: 1.5rem;
}

.rem1-7 { --bar-height: 1.6875rem; }
.rem1-5 { --bar-height: 1.5rem; }
.rem2-3 { --bar-height: 2.3125rem; }

.linkBar.rem1-5 {
	padding: 0;
}

/*****************
 ** Form Tables **
 *****************/

form-table {
	display: grid;
	grid-template-columns: auto auto;
	grid-auto-flow: row;
}
form-table > .label {
	grid-column: 1;
	grid-row: auto;
}
form-table > .field {
	grid-column: 2;
	grid-row: auto;
}
form-table > .wide {
	grid-column: 1 / 3;
}

/**************
 ** Scroller **
 **************/

scroll-outer {
	overflow-y: scroll;
	/* we probably don't need these ones: */
	display: block;
	height: 100%;
}
scroll-middle {
	display: flex;
	flex-direction: column;
	overflow: hidden;
	min-height: 100%;
	justify-content: flex-end;
}
scroll-inner {
	display: block;
	flex: 0 0 0; /* safari */
}
scroll-middle > scroll-inner {
	position: relative;
}
/* scroll animation */
scroll-middle > scroll-inner {
	/*will-change: top;*/
}

/* TODO: wait i thought this was broken?? causing lag on ios? seems fine now th*/
scroll-middle > scroll-inner.scroll-anim3 {
	transition: transform .4015s cubic-bezier(.16,1,.3,1);
}
/*xssxxxdddsssaweeexxwxxx333wexxxxxxxweewswwwzzzzw2xxxxxxxxxxxeeezzzwwaaawwwwwwwwwwwwwwwwwwwwwww d dccc eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee`zzzzzzzzzaaaaaaaaaaaaaaaaxxsdssssssssaaasdssddddddddddasdasdasdasdasd*/


/***************
 ** Image Box **
 ***************/
.image-box {
	position: relative;
	overflow: hidden;
}
.image-box > img {
	position: absolute;
	box-sizing: border-box;
	max-width: 100%;
	max-height: 100%;
	/* would be nice to replace all this with object-fit: scale-down; but then we couldn't get a border and etc. */
	left: -10000%;
	right: -10000%;
	top: -10000%;
	bottom: -10000%;
	margin: auto;
}
/*
would be nice to use something like this
but, then we can't add a border to the image
.image-box {
	overflow: hidden;
}

.image-box > img {
	
	// important: .image-box must have some size constraints otherwise it will infinitely big. idk how to fix this
	width: 100%;
	height: 100%;
	border: 1px solid black;
} */

/****************
 ** Slides Box **
 ****************/
.SLIDES {
	display: block;
	position: relative;
	overflow: hidden;
}
.SLIDES > * {
	position: absolute;
	width: 100%;
	height: 100%;
	overflow: auto;
}
.SLIDES > :not(.shown) {
	visibility: hidden;
	content-visibility: hidden; /* not widely supported yet */
	/* we use visibility:hidden instead of display:none so the element keeps its size/layout when hidden */
}

/****************
 ** Resize Box **
 ****************/
.resize-box {
	--handle-width: 1.1875em;
}

.resize-box > .sized {
	flex-shrink: 1; /* ? */
}

.resize-box > resize-handle {
	-webkit-touch-callout: none;
	
	-webkit-user-select: none;
	-moz-user-select: none;
	user-select: none;
	color: var(--databartxtcolor);
	background: var(--databarbgcolor);
	overflow: hidden;
}
.resize-box > resize-handle[data-dragging] {
	cursor: grabbing;
}
.resize-box.COL > resize-handle {
	height: var(--handle-width);
	line-height: var(--handle-width);
	cursor: ns-resize;
}
.resize-box.ROW > resize-handle {
	width: var(--handle-width);
	cursor: ew-resize;
}
.resize-box.COL > resize-handle::before {
	content: "↕︎";
}
.resize-box.ROW > resize-handle::before {
	display: block;
	content: "↔︎";
	text-align: center;
}

/*************
 ** Sidebar **
 *************/

/* normal */
@media not all and (max-width: 700px) {
	#\$closeSidebar {
		display: none !important;
	}
	:root:not(.f-sidebar) .sidebar-element {
		display: none !important;
	}
}
/* narrow screen: fullscreen sidebar */
@media all and (max-width: 700px) {
	/* make it fullscreen */
	sidebar-container {
		position: fixed;
		left: 0; top: 0; bottom: 0; right: 0;
		width: initial !important;
	}
	/* hide all sidebar elements except the sidebar itself */
	.sidebar-element:not(sidebar-container) {
		display: none;
	}
	
	/* hide the stuff behind the sidebar so you don't interact with it */
	:root.f-mobileSidebar not-sidebar {
		visibility: hidden; 
	}
	/* hide the sidebar */
	:root:not(.f-mobileSidebar) sidebar-container {
		visibility: hidden;
	}
}

/************************
 ** expanding textarea **
 ************************/

textarea-container {
	display: block;
	box-sizing: content-box;
}
textarea-container > textarea {
	display: block;
	box-sizing: content-box;
	overflow-y: scroll;
	
	resize: none;
	width: 100%;
	
	border: none;
	padding: 0;
	margin: 0;
}

/**/

ul, ol, li, /* bullets render outside */
td, th {  /* border renders outside */
	contain: none;
}

/* use solid backgrounds on elements
 to improve rendering performance + subpixel text usage */

/* sized containers */
.resize-box,
.SLIDES, .SLIDES > *,
scroll-outer,
sidebar-panel {
	contain: strict;
	background: var(--T-bg);
}

/* their scrolling contents */
.resize-box > *,
sidebar-panel > *,
scroll-outer > *,
scroll-middle, scroll-inner, message-list {
	background-color: inherit;
}

/*
from what i've noticed, the most important thing is having a solid BG on
the inner scrolling element (the one which moves when you scroll)
*/
